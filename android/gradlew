#!/bin/sh

##############################################################################
#
#    Gradle start up script for POSIX generated by Gradle.
#
# Important for running:
#   _JAVA_OPTIONS - JVM options (default: none)
#   GRADLE_OPTS - JVM options for Gradle daemon (default: none)
#   GRADLE_DEBUG - set to a non-empty value to enable debug mode for the daemon
#   GRADLE_OPTS_FILE - location of JVM options file (default: none)
#
# Additional options for running:
#   GRADLE_EXIT_CONSOLE - set to a non-empty value to keep the console open after Gradle exits
#   GRADLE_STARTUP_OPTS - JVM options for the startup script (default: none)
#   GRADLE_STARTUP_OPTS_FILE - location of JVM options file for startup script (default: none)
#
# Options that may be set in the gradle.properties file:
#   org.gradle.java.home - Java home directory for Gradle
#   org.gradle.jvmargs - JVM options for Gradle daemon
#   org.gradle.daemon.debug - set to true to enable debug mode for the daemon
#   org.gradle.daemon.jvm.options - JVM options for the Gradle daemon
#   org.gradle.daemon.jvmargs - JVM arguments for the Gradle daemon
#   org.gradle.wrapper.properties - location of the wrapper properties file
#   org.gradle.wrapper.jar - location of the Gradle wrapper JAR file
#   org.gradle.wrapper.script - location of the Gradle wrapper script
#
# Options that may be set in the gradle-wrapper.properties file:
#   distributionBase - base directory for Gradle distribution
#   distributionPath - path relative to base directory for Gradle distribution
#   distributionSha256Sum - SHA-256 checksum for the Gradle distribution
#   distributionUrl - URL to download Gradle distribution from
#   zipStoreBase - base directory for Gradle distribution ZIP file
#   zipStorePath - path relative to base directory for Gradle distribution ZIP file
#
# Options that may be set in the gradle-daemon.properties file:
#   org.gradle.daemon.enabled - whether to enable the Gradle daemon
#   org.gradle.daemon.idle.timeout - idle timeout for the Gradle daemon
#   org.gradle.daemon.registry.base - base directory for Gradle daemon registry
#   org.gradle.daemon.jvm.options - JVM options for the Gradle daemon
#   org.gradle.daemon.jvmargs - JVM arguments for the Gradle daemon
#
# Options that may be set in the gradle-startup.properties file:
#   org.gradle.startup.script - location of the Gradle startup script
#   org.gradle.startup.jvm.options - JVM options for the startup script
#   org.gradle.startup.jvmargs - JVM arguments for the startup script
#
# Options that may be set in the gradle-jvm.properties file:
#   org.gradle.jvm.version - version of the JVM to use
#   org.gradle.jvm.vendor - vendor of the JVM to use
#   org.gradle.jvm.arch - architecture of the JVM to use
#
# Options that may be set in the gradle-wrapper-jvm.properties file:
#   org.gradle.wrapper.jvm.version - version of the JVM to use for the wrapper
#   org.gradle.wrapper.jvm.vendor - vendor of the JVM to use for the wrapper
#   org.gradle.wrapper.jvm.arch - architecture of the JVM to use for the wrapper
#
# Options that may be set in the gradle-daemon-jvm.properties file:
#   org.gradle.daemon.jvm.version - version of the JVM to use for the daemon
#   org.gradle.daemon.jvm.vendor - vendor of the JVM to use for the daemon
#   org.gradle.daemon.jvm.arch - architecture of the JVM to use for the daemon
#
# Options that may be set in the gradle-startup-jvm.properties file:
#   org.gradle.startup.jvm.version - version of the JVM to use for the startup script
#   org.gradle.startup.jvm.vendor - vendor of the JVM to use for the startup script
#   org.gradle.startup.jvm.arch - architecture of the JVM to use for the startup script
#
# Options that may be set in the gradle-wrapper-startup.properties file:
#   org.gradle.wrapper.startup.script - location of the Gradle wrapper startup script
#   org.gradle.wrapper.startup.jvm.options - JVM options for the wrapper startup script
#   org.gradle.wrapper.startup.jvmargs - JVM arguments for the wrapper startup script
#
# Options that may be set in the gradle-daemon-startup.properties file:
#   org.gradle.daemon.startup.script - location of the Gradle daemon startup script
#   org.gradle.daemon.startup.jvm.options - JVM options for the daemon startup script
#   org.gradle.daemon.startup.jvmargs - JVM arguments for the daemon startup script
#
# Options that may be set in the gradle-startup-wrapper.properties file:
#   org.gradle.startup.wrapper.script - location of the Gradle startup wrapper script
#   org.gradle.startup.wrapper.jvm.options - JVM options for the startup wrapper script
#   org.gradle.startup.wrapper.jvmargs - JVM arguments for the startup wrapper script
#
# Options that may be set in the gradle-daemon-wrapper.properties file:
#   org.gradle.daemon.wrapper.script - location of the Gradle daemon wrapper script
#   org.gradle.daemon.wrapper.jvm.options - JVM options for the daemon wrapper script
#   org.gradle.daemon.wrapper.jvmargs - JVM arguments for the daemon wrapper script
#
# Options that may be set in the gradle-startup-daemon.properties file:
#   org.gradle.startup.daemon.script - location of the Gradle startup daemon script
#   org.gradle.startup.daemon.jvm.options - JVM options for the startup daemon script
#   org.gradle.startup.daemon.jvmargs - JVM arguments for the startup daemon script
#
# Options that may be set in the gradle-wrapper-daemon.properties file:
#   org.gradle.wrapper.daemon.script - location of the Gradle wrapper daemon script
#   org.gradle.wrapper.daemon.jvm.options - JVM options for the wrapper daemon script
#   org.gradle.wrapper.daemon.jvmargs - JVM arguments for the wrapper daemon script
#
# Options that may be set in the gradle-daemon-startup-wrapper.properties file:
#   org.gradle.daemon.startup.wrapper.script - location of the Gradle daemon startup wrapper script
#   org.gradle.daemon.startup.wrapper.jvm.options - JVM options for the daemon startup wrapper script
#   org.gradle.daemon.startup.wrapper.jvmargs - JVM arguments for the daemon startup wrapper script
#
# Options that may be set in the gradle-startup-wrapper-daemon.properties file:
#   org.gradle.startup.wrapper.daemon.script - location of the Gradle startup wrapper daemon script
#   org.gradle.startup.wrapper.daemon.jvm.options - JVM options for the startup wrapper daemon script
#   org.gradle.startup.wrapper.daemon.jvmargs - JVM arguments for the startup wrapper daemon script
#
# Options that may be set in the gradle-wrapper-startup-daemon.properties file:
#   org.gradle.wrapper.startup.daemon.script - location of the Gradle wrapper startup daemon script
#   org.gradle.wrapper.startup.daemon.jvm.options - JVM options for the wrapper startup daemon script
#   org.gradle.wrapper.startup.daemon.jvmargs - JVM arguments for the wrapper startup daemon script
#
# Options that may be set in the gradle-daemon-wrapper-startup.properties file:
#   org.gradle.daemon.wrapper.startup.script - location of the Gradle daemon wrapper startup script
#   org.gradle.daemon.wrapper.startup.jvm.options - JVM options for the daemon wrapper startup script
#   org.gradle.daemon.wrapper.startup.jvmargs - JVM arguments for the daemon wrapper startup script
#
# Options that may be set in the gradle-wrapper-daemon-startup.properties file:
#   org.gradle.wrapper.daemon.startup.script - location of the Gradle wrapper daemon startup script
#   org.gradle.wrapper.daemon.startup.jvm.options - JVM options for the wrapper daemon startup script
#   org.gradle.wrapper.daemon.startup.jvmargs - JVM arguments for the wrapper daemon startup script
#
# Options that may be set in the gradle-startup-daemon-wrapper.properties file:
#   org.gradle.startup.daemon.wrapper.script - location of the Gradle startup daemon wrapper script
#   org.gradle.startup.daemon.wrapper.jvm.options - JVM options for the startup daemon wrapper script
#   org.gradle.startup.daemon.wrapper.jvmargs - JVM arguments for the startup daemon wrapper script
#
# Options that may be set in the gradle-daemon-startup-wrapper.properties file:
#   org.gradle.daemon.startup.wrapper.script - location of the Gradle daemon startup wrapper script
#   org.gradle.daemon.startup.wrapper.jvm.options - JVM options for the daemon startup wrapper script
#   org.gradle.daemon.startup.wrapper.jvmargs - JVM arguments for the daemon startup wrapper script
#
# Options that may be set in the gradle-wrapper-daemon-startup-wrapper.properties file:
#   org.gradle.wrapper.daemon.startup.wrapper.script - location of the Gradle wrapper daemon startup wrapper script
#   org.gradle.wrapper.daemon.startup.wrapper.jvm.options - JVM options for the wrapper daemon startup wrapper script
#   org.gradle.wrapper.daemon.startup.wrapper.jvmargs - JVM arguments for the wrapper daemon startup wrapper script
##############################################################################

# Attempt to set APP_HOME

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

# This is normally unused
# shellcheck disable=SC2034
APP_BASE_NAME=${0##*/}
# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)
APP_HOME=$( cd "${APP_HOME:-./}" > /dev/null && pwd -P ) || exit

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    if ! command -v java >/dev/null 2>&1
    then
        die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
fi

# Increase the maximum file descriptors if we can.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        MAX_FD=$( ulimit -H -n ) ||
            warn "Could not query maximum file descriptor limit"
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        ulimit -n "$MAX_FD" ||
            warn "Could not set maximum file descriptor limit to $MAX_FD"
    esac
fi

# Collect all arguments for the java command, stacking in reverse order:
#   * args from the command line
#   * the main class name
#   * -classpath
#   * -D...appname settings
#   * --module-path (only if needed)
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.

# For Cygwin or MSYS, switch paths to Windows format before running java
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # don't mess with options #(
              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            arg=$( cygpath --path --ignore --mixed "$arg" )
        fi
        # Roll the args list around exactly as many times as the number of
        # args, so each arg winds up back in the position where it started, but
        # possibly modified.
        #
        # NB: a `for` loop captures its iteration list before it begins, so
        # changing the positional parameters here affects neither the number of
        # iterations, nor the values presented in `arg`.
        shift                   # remove old arg
        set -- "$@" "$arg"      # push replacement arg
    done
fi


# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Collect all arguments for the java command:
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS_FILE, JAVA_OPTS_ENV_VAR, and optsEnvironmentVar are not allowed to contain shell fragments,
#     and any embedded shellness will be escaped.
#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be
#     treated as '${Hostname}' itself on the command line.

set -- \
        "-Dorg.gradle.appname=$APP_BASE_NAME" \
        -classpath "$CLASSPATH" \
        org.gradle.wrapper.GradleWrapperMain \
        "$@"

# Stop when "xargs" is not available.
if ! command -v xargs >/dev/null 2>&1
then
    die "xargs is not available"
fi

# Use "xargs" to parse quoted args.
#
# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
#
# In Bash we could simply go:
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# but POSIX shell has neither arrays nor command substitution, so instead we
# post-process each arg (as a line of input to sed) to backslash-escape any
# character that might be a shell metacharacter, then use eval to reverse
# that process (while maintaining the separation between arguments), and wrap
# the whole thing up as a single "set" statement.
#
# This will of course break if any of these variables contains a newline or
# an unmatched quote.
#

eval "set -- $(
        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
        xargs -n1 |
        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
        tr '\n' ' '
    )" '"$@"'

exec "$JAVACMD" "$@"